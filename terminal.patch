diff --git a/QT_StirTrace_v4.0/main.cpp b/QT_StirTrace_v4.0/main.cpp
index e39be68..4af45d7 100644
--- a/QT_StirTrace_v4.0/main.cpp
+++ b/QT_StirTrace_v4.0/main.cpp
@@ -7,11 +7,6 @@
 #include <stdio.h>

 int main(int argc, char *argv[]) {
-#ifdef Q_WS_X11
-    bool useGUI = getenv("DISPLAY") != 0; // check for xserver availability
-#else
-    bool useGUI = true;
-#endif
     bool batchMode = false;
     bool showCMDLineHelp = false;
     bool combineMode = false;
@@ -77,7 +72,7 @@ int main(int argc, char *argv[]) {
                          << "--doublescale"
                          << "--haarcascade";

-    QApplication a(argc, argv, useGUI);
+    QApplication a(argc, argv, false);
     for (int i = 0; i < a.arguments().size(); i++) {
         // printf("[%d] %s\n",i, argv[i]);
         switch (validCMDLineSwitches.indexOf(a.arguments().at(i))) {
@@ -116,61 +111,54 @@ int main(int argc, char *argv[]) {
         default: break;
         }
     }
-    if ((batchMode) || (!useGUI)) {
-        if ((showCMDLineHelp) || (a.arguments().size() < 3)) {
-            printf("QT_StirTrace command line interface help\n\n");
-            printf("Usage: %s [options]\n\n", argv[0]);
-            printf("Options:\n");
-            printf("-h\tshow this help screen\n");
-            printf("-b\tenter non-interactive mode\n");
-            printf("-d [path]\tpath of files to process\n");
-            printf("-n parameters\t Additive White Noise\n");
-            printf("-g parameters\t Additive Gaussian Noise (µ=0)\n");
-            printf("-m parameters\t Median Cut Filtering\n");
-            printf("-l parameters\t Removal of Lines\n");
-            printf("-c parameters\t Removal of Columns\n");
-            printf("-r parameters\t Rotation\n");
-            printf("-x parameters\t Stretching in X Direction\n");
-            printf("-y parameters\t Shearing in Y Direction\n");
-            printf("-s parameters\t Scaling\n");
-            printf("-o parameters\t Cropping\n");
-            printf("-a parameters\t Banding Artifacts\n");
-            printf("-p parameters\t Salt and Pepper Noise\n");
-            printf("-f parameters\t Shift Values, e.g. to simulate a different parameterization\n");
-            printf("-i parameters\t Tilt Simulation, specify planes as triplets A#B#C,...\n");
-            printf("-8 convert data to 8 bit range\n");
-            printf("-e filename\t Embed Trace on Substrate\n");
-            printf("-t\t Combine Filtering Techniques\n");
-            printf("--eval evalMethod\t Perform Evaluation, modes: %s\n", validEvalModes.toUtf8().constData());
-            printf("--preprocess PreprocessingMethod\t Perform a Preprocessing, modes: %s\n",
-                   validPreProcModes.toUtf8().constData());
-            printf("--baseline\t Determine Baseline Performance\n");
-            printf("--passport parameters\t Enable Passport Scaling, specify parameters by WIDTHxHEIGHT\n");
-            printf("--doublescale parameters\t Scaling to scaling parameter(s) and back to original size\n");
-            printf("--haarcascade filename\t Full path pointing to the OpenCV Haar Cascade to be used\n");
-        } else {
-            QFileInfo FI = QFileInfo(FilePath);
-            if (FI.isDir()) {
-                imgproc *processing = new imgproc(FilePath, NoiseLevels, MedianFilters, LineRemoval, ColumnRemoval,
-                                                  RotAngles, XStretchFactors, YShearFactors, ScaleFactors, CropFactors,
-                                                  BandingFrequency, SaltAndPepper, GaussianNoise, SubstrateFile,
-                                                  eightBitConversion, EvalMode, PreProcessMode, ShiftParams, TiltParams,
-                                                  baseline, passportscaling, haarcascade, DoubleScalingFactors);
-                if (!combineMode)
-                    processing->startProcessing();
-                else {
-                    processing->startCombinedProcessing();
-                }
-            } else {
-                printf("error: [%s] is not a valid directory\n", FilePath.toUtf8().constData());
-                return 1;
+    if ((showCMDLineHelp) || (a.arguments().size() < 3)) {
+        printf("QT_StirTrace command line interface help\n\n");
+        printf("Usage: %s [options]\n\n", argv[0]);
+        printf("Options:\n");
+        printf("-h\tshow this help screen\n");
+        printf("-b\tenter non-interactive mode\n");
+        printf("-d [path]\tpath of files to process\n");
+        printf("-n parameters\t Additive White Noise\n");
+        printf("-g parameters\t Additive Gaussian Noise (µ=0)\n");
+        printf("-m parameters\t Median Cut Filtering\n");
+        printf("-l parameters\t Removal of Lines\n");
+        printf("-c parameters\t Removal of Columns\n");
+        printf("-r parameters\t Rotation\n");
+        printf("-x parameters\t Stretching in X Direction\n");
+        printf("-y parameters\t Shearing in Y Direction\n");
+        printf("-s parameters\t Scaling\n");
+        printf("-o parameters\t Cropping\n");
+        printf("-a parameters\t Banding Artifacts\n");
+        printf("-p parameters\t Salt and Pepper Noise\n");
+        printf("-f parameters\t Shift Values, e.g. to simulate a different parameterization\n");
+        printf("-i parameters\t Tilt Simulation, specify planes as triplets A#B#C,...\n");
+        printf("-8 convert data to 8 bit range\n");
+        printf("-e filename\t Embed Trace on Substrate\n");
+        printf("-t\t Combine Filtering Techniques\n");
+        printf("--eval evalMethod\t Perform Evaluation, modes: %s\n", validEvalModes.toUtf8().constData());
+        printf("--preprocess PreprocessingMethod\t Perform a Preprocessing, modes: %s\n",
+               validPreProcModes.toUtf8().constData());
+        printf("--baseline\t Determine Baseline Performance\n");
+        printf("--passport parameters\t Enable Passport Scaling, specify parameters by WIDTHxHEIGHT\n");
+        printf("--doublescale parameters\t Scaling to scaling parameter(s) and back to original size\n");
+        printf("--haarcascade filename\t Full path pointing to the OpenCV Haar Cascade to be used\n");
+    } else {
+        QFileInfo FI = QFileInfo(FilePath);
+        if (FI.isDir()) {
+            imgproc *processing =
+                new imgproc(FilePath, NoiseLevels, MedianFilters, LineRemoval, ColumnRemoval, RotAngles,
+                            XStretchFactors, YShearFactors, ScaleFactors, CropFactors, BandingFrequency, SaltAndPepper,
+                            GaussianNoise, SubstrateFile, eightBitConversion, EvalMode, PreProcessMode, ShiftParams,
+                            TiltParams, baseline, passportscaling, haarcascade, DoubleScalingFactors);
+            if (!combineMode)
+                processing->startProcessing();
+            else {
+                processing->startCombinedProcessing();
             }
+        } else {
+            printf("error: [%s] is not a valid directory\n", FilePath.toUtf8().constData());
+            return 1;
         }
-        return 0;
-    } else {
-        MainWindow w(a.arguments());
-        w.show();
-
-        return a.exec();
     }
+    return 0;
 }
